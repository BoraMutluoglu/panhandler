version: 2
jobs:
  build:
    docker:
      - image: circleci/python:3.6.8
#        environment:
#          FLASK_CONFIG: testing
    steps:
      - checkout
#      - run:
#          name: Setup VirtualEnv
#          command: |
#            echo 'export TAG=0.1.${CIRCLE_BUILD_NUM}' >> $BASH_ENV
#            echo 'export IMAGE_NAME=python-circleci-docker' >> $BASH_ENV
#            virtualenv helloworld
#            . helloworld/bin/activate
#            pip install --no-cache-dir -r requirements.txt
#      - run:
#          name: Run Tests
#          command: |
#            . helloworld/bin/activate
#            python test_hello_world.py
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Build and push Docker image
          command: |
            if [ "${CIRCLE_BRANCH}" == "master" ]; then
              echo 'export TAG=1.0.${CIRCLE_BUILD_NUM}' >> $BASH_ENV
            elif [ "${CIRCLE_BRANCH}" == "develop" ]; then
              echo 'export TAG=dev' >> $BASH_ENV
            else:
              echo "Not building other branch"
            fi
#            . helloworld/bin/activate
#            pyinstaller -F hello_world.py
            docker build -t paloaltonetworks/panhandler:$TAG .
            echo $DOCKER_PWD | docker login -u $DOCKER_LOGIN --password-stdin
            docker push paloaltonetworks/panhandler:$TAG
#      - run:
#          name: Deploy app to Digital Ocean Server via Docker
#          command: |
#            ssh -o StrictHostKeyChecking=no root@hello.dpunks.org "/bin/bash ./deploy_app.sh ariv3ra/$IMAGE_NAME:$TAG"


## Golang CircleCI 2.0 configuration file
##
## Check https://circleci.com/docs/2.0/language-go/ for more details
#version: 2
#jobs:
#  build:
#    docker:
#      # specify the version
#      - image: circleci/golang:1.9
#
#      # Specify service dependencies here if necessary
#      # CircleCI maintains a library of pre-built images
#      # documented at https://circleci.com/docs/2.0/circleci-images/
#
#    working_directory: /go/src/github.com/PaloAltoNetworks/terraform-templates
#    steps:
#      - checkout
#
#      # specify any bash command here prefixed with `run: `
#      # - run: go get -v -t -d ./...
#      # - run: go test -v ./...
#
#      - setup_remote_docker:
#          docker_layer_caching: true
#
#      - run: |
#          TAG=${CIRCLE_SHA1}
#          docker build -t paloaltonetworks/terraform_ansible:${TAG} automation_container/
#          docker login -u ${DOCKER_BOT_USER} -p ${DOCKER_BOT_PASSWORD}
#          docker tag paloaltonetworks/terraform_ansible:${TAG} paloaltonetworks/terraform_ansible:latest
#          docker push paloaltonetworks/terraform_ansible:${TAG}
#          docker push paloaltonetworks/terraform_ansible:latest